rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ─────────────────────────────────────────────────────────────────────────
    // PROFILES: public reads, owner‐only writes
    // ─────────────────────────────────────────────────────────────────────────
    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && request.auth.uid == userId;
    }

    // ─────────────────────────────────────────────────────────────────────────
    // POSTS: public reads, authenticated creation, owner‐only update/delete
    // ─────────────────────────────────────────────────────────────────────────
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null
                            && request.auth.uid == resource.data.userId;
    }

    // ─────────────────────────────────────────────────────────────────────────
    // MESSAGES: each “room” document under /messages/{roomId}, plus its sub‐collection
    // MESSAGES: each “room” document under /messages/{roomId}, plus its sub‐collection
    // ─────────────────────────────────────────────────────────────────────────
    match /messages/{roomId} {
      // 1) Allow listing only rooms you participate in
      allow list: if request.auth != null
                  && request.auth.uid in resource.data.participants;

      // 2) Allow fetching a single room doc (so createRoom() can check existence)
      allow get: if request.auth != null;

      // 3) Only allow creating a new room if you’re in its participants array
      allow create: if request.auth != null
                    && request.resource.data.participants is list
                    && request.auth.uid in request.resource.data.participants;

      // 4) Allow participants to update the room document,
      //    but only in ways that preserve the original participants array.
      allow update: if request.auth != null
                    && request.auth.uid in resource.data.participants
                    && request.resource.data.participants == resource.data.participants
                    // Ensure only `lastReads` and/or `typing` have changed:
                    && request.resource.data.keys().hasAll([
                         'participants',
                         'lastReads',
                         'typing'
                       ])
                    && request.resource.data.keys().hasOnly([
                         'participants',
                         'lastReads',
                         'typing'
                       ]);

      // 5) Disallow deleting a room
      allow delete: if false;

      // ─────────────────────────────────────────────────────────────────────────
      // Sub‐collection “messages” under each room:
      //   /messages/{roomId}/messages/{messageId}
      // ─────────────────────────────────────────────────────────────────────────
      match /messages/{messageId} {
        // Only participants may read messages
        allow read: if request.auth != null
                    && request.auth.uid in get(
                         /databases/$(database)/documents/messages/$(roomId)
                       ).data.participants;

        // Only participants may post a new message, and senderId must match auth.uid
        allow create: if request.auth != null
                      && request.resource.data.senderId == request.auth.uid
                      && request.auth.uid in get(
                           /databases/$(database)/documents/messages/$(roomId)
                         ).data.participants
                      && request.resource.data.text is string
                      && request.resource.data.timestamp is number;

        // Disallow updating or deleting existing message docs
        allow update, delete: if false;
      }
    }

    // ─────────────────────────────────────────────────────────────────────────
    // All other documents: block by default
    // ─────────────────────────────────────────────────────────────────────────
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
